<?php

/**
 * Plugin Name: SAIL User Management
 * Plugin URI: https://github.com/tmuelle2/sail-user-management
 * Description: SAIL website user management plugin
 * Version: 0.1
 */

// Load dependencies of ClassAutoloader and ClassAutoloader itself
require_once __DIR__ . '/Constants.php';
require_once __DIR__ . '/caching/DatabaseCache.php';
require_once __DIR__ . '/utils/Logger.php';
require_once __DIR__ . '/utils/Singleton.php';
require_once __DIR__ . '/utils/Stopwatch.php';
require_once __DIR__ . '/utils/PhpUtils.php';
require_once __DIR__ . '/utils/ClassAutoloader.php';

use Sail\Utils\ClassAutoloader;

spl_autoload_register(array(ClassAutoloader::getInstance(), 'autoload'));

use Sail\Api\NewsletterSubscribeApi;
use Sail\Api\NewsletterUnsubscribeApi;
use Sail\Api\PayDuesApi;
use Sail\Constants;
use Sail\Data\Dao\UserDao;
use Sail\Form\Handlers\AddFamilyMemberHandler;
use Sail\Form\Handlers\ChangePasswordHandler;
use Sail\Form\Handlers\ConfirmFamilyLinkHandler;
use Sail\Form\Handlers\ForgotPasswordHandler;
use Sail\Form\Handlers\FriendshipConnectProfileUpdateHandler;
use Sail\Form\Handlers\FriendshipConnectProfileRegistrationHandler;
use Sail\Form\Handlers\UserLoginHandler;
use Sail\Form\Handlers\UserLogoutHandler;
use Sail\Form\Handlers\UserProfileUpdateHandler;
use Sail\Form\Handlers\UserRegistrationHandler;
use Sail\Form\Handlers\VerifyEmailApi;
use Sail\Shortcodes\FriendshipConnectShortCodes;
use Sail\Shortcodes\MessageShortCodes;
use Sail\Shortcodes\UserShortCodes;
use Sail\Utils\HtmlUtils;
use Sail\Utils\WebUtils;

// TODO: Remove Bluehost vendor plugin actions?  Currently the Bluehost plugin is disabled because
// this plugin it installs caused an issue with passwords that are in the Have I Been Pwned DB:
// https://github.com/newfold-labs/wp-module-secure-passwords/blob/main/secure-passwords.php
// Could use an approach like:
// https://wordpress.stackexchange.com/questions/304859/remove-action-from-a-plugin-class

/**
 * Runs on set current user hook, runs on every request.
 * Hook in early to ensure permission definition runs before Media Vault.
 */
add_action('set_current_user', 'sailPluginPreInit');
function sailPluginPreInit()
{
    // Restrict Media Vault files to paid members
    if (function_exists('mgjp_mv_add_permission')) {
        mgjp_mv_add_permission('paid-subscribers', array(
            'description' => 'Restricts files to paid members.',
            'select' => 'Paid Members',
            'logged_in' => true, // whether the user must be logged in
            'run_in_admin' => false, // whether to run the access check in admin
            'cb' => 'restrictMediaVaultToPaidMembers',
        ));
    }
}

function restrictMediaVaultToPaidMembers()
{
    if (is_user_logged_in()) {
        $sailUser = UserDao::getInstance()->getSailUser();
        if ($sailUser->isDuePayingUser()) {
            return true;
        }
    }
    return false;
}

/**
 * Runs on plugin init hook, runs on every request.
 */
add_action('init', 'sailPluginInit');
function sailPluginInit()
{
    UserShortCodes::getInstance()->registerShortcodes();
    FriendshipConnectShortcodes::getInstance()->registerShortcodes();
    MessageShortCodes::getInstance()->registerShortcodes();
}

/**
 * Runs on hook for registering and adding JS and CSS scripts in the header.
 */
add_action('wp_enqueue_scripts', 'sailPluginEnqueueScripts');
function sailPluginEnqueueScripts()
{
    wp_enqueue_style('sailPluginStyle', Constants::CSS_COMMON);
    wp_enqueue_script(Constants::JS_COMMON_SCRIPT_HANDLE, Constants::JS_COMMON, null, false, true);
}

/**
 * Runs on hook for the theme injecting the footer.
 * Useful to add scripts or data to the page that requires values generated by the plugin during the other rendering steps
 */
add_action('wp_footer', 'sailPluginPrintScripts');
function sailPluginPrintScripts()
{
    HtmlUtils::addCommonJs();
}


/**
 * Runs on plugin activation, only run once when the plugin activates.
 */
register_activation_hook(__file__, 'sailPluginActivate');
function sailPluginActivate()
{
    ClassAutoloader::getInstance()->updateCachedClasspath();
}

/**
 * Initialize rest apis.
 */
add_action('rest_api_init', 'registerApis');
function registerApis()
{
    // General APIs
    NewsletterSubscribeApi::getInstance()->registerApi();
    NewsletterUnsubscribeApi::getInstance()->registerApi();
    PayDuesApi::getInstance()->registerApi();
    VerifyEmailApi::getInstance()->registerApi();

    // Form submission APIs
    AddFamilyMemberHandler::getInstance()->registerApi();
    ChangePasswordHandler::getInstance()->registerApi();
    ConfirmFamilyLinkHandler::getInstance()->registerApi();
    ForgotPasswordHandler::getInstance()->registerApi();
    FriendshipConnectProfileUpdateHandler::getInstance()->registerApi();
    FriendshipConnectProfileRegistrationHandler::getInstance()->registerApi();
    UserLoginHandler::getInstance()->registerApi();
    UserLogoutHandler::getInstance()->registerApi();
    UserProfileUpdateHandler::getInstance()->registerApi();
    UserRegistrationHandler::getInstance()->registerApi();
}

/**
 * Set the site login URL to the /login pretty permalink page
 */
add_filter('login_url', 'sail_login_url', PHP_INT_MAX );
function sail_login_url( $login_url ) {
	$login_url = WebUtils::getUrl('/login');	
    return $login_url;
}

/**
 * Disables plugin autoupdate emails which trigger spam filters.
 */
add_filter( 'auto_plugin_update_send_email', '__return_false' );
